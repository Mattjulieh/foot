// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A match recommendation AI agent.
 *
 * - getMatchRecommendations - A function that handles the match recommendation process.
 * - MatchRecommendationsInput - The input type for the getMatchRecommendations function.
 * - MatchRecommendationsOutput - The return type for the getMatchRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const MatchRecommendationsInputSchema = z.object({
  viewingHistory: z.array(z.string()).describe('List of match IDs the user has previously viewed.'),
  favoriteTeams: z.array(z.string()).describe('List of the user\u0027s favorite team names.'),
});
export type MatchRecommendationsInput = z.infer<typeof MatchRecommendationsInputSchema>;

const MatchRecommendationsOutputSchema = z.object({
  recommendedMatches: z.array(z.object({
    matchId: z.string().describe('The ID of the recommended match.'),
    league: z.string().describe('The league the match belongs to.'),
    homeTeam: z.string().describe('The name of the home team.'),
    awayTeam: z.string().describe('The name of the away team.'),
    matchTime: z.string().describe('The date and time of the match in ISO format.'),
    reason: z.string().describe('The reason for recommending this match.'),
  })).describe('List of recommended matches.'),
});
export type MatchRecommendationsOutput = z.infer<typeof MatchRecommendationsOutputSchema>;

export async function getMatchRecommendations(input: MatchRecommendationsInput): Promise<MatchRecommendationsOutput> {
  return matchRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'matchRecommendationsPrompt',
  input: {schema: MatchRecommendationsInputSchema},
  output: {schema: MatchRecommendationsOutputSchema},
  prompt: `You are an AI assistant that recommends soccer matches to users based on their viewing history and favorite teams.

  Given the user's viewing history and favorite teams, recommend matches that they might be interested in.
  Explain the reason for each recommendation.

  User Viewing History: {{viewingHistory}}
  Favorite Teams: {{favoriteTeams}}

  Format your response as a JSON object with a list of recommended matches. Each match should include the match ID, league, home team, away team, match time, and a reason for the recommendation.
  `,
});

const matchRecommendationsFlow = ai.defineFlow(
  {
    name: 'matchRecommendationsFlow',
    inputSchema: MatchRecommendationsInputSchema,
    outputSchema: MatchRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
